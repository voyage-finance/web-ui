import { BigNumber } from "bignumber.js";
declare type TokenStandard = "ERC721" | "ERC1155";
declare type MarketPlace = "opensea" | "nftx" | "nftx" | "rarible" | "gem" | "larvalabs" | "uniswap" | "sushiswap" | string;
declare type AssetDetails = object;
declare type ErrorResponse = {
    error: string | object;
};
export declare type Address = string;
export declare type TokenId = string;
export interface BuyDetails {
    standard: TokenStandard;
    address: Address;
    tokenId: TokenId;
    amount: number;
}
export declare type BatchBuyDetails = Array<BuyDetails>;
declare type RouteDetails = {
    action: "buy" | "sell" | "swap";
    marketplace: MarketPlace;
    assetIn: AssetDetails;
    standard: TokenStandard;
    maker: Address;
    price: string;
    contract: Address;
    tokenId: TokenId;
    protocolFee: number;
    assetOut: AssetDetails;
};
declare type UnavailableDetails = object;
declare type CollectionObject = {
    name: string;
    symbol: string;
    standard: string;
    description: string;
    address: string;
    externalUrl: string;
    imageUrl: string;
    totalSupply: Number;
    isVerified: Boolean;
};
declare type AssetObject = {
    id: string;
    name: string;
    address: string;
    description: string;
    externalLink: string;
    imageUrl: string;
    smallImageUrl: string;
    animationUrl: string;
    tokenMetadata: string;
    standard: string;
    traits: UnavailableDetails;
    creator: UnavailableDetails;
    owner: UnavailableDetails;
    market: MarketPlace;
    currentBasePrice: BigNumber;
    currentEthPrice: BigNumber;
    currentUsdPrice: BigNumber;
    paymentToken: string;
    marketUrl: string;
    duration: Number;
    endingPrice: BigNumber;
    startingPrice: BigNumber;
    events: UnavailableDetails;
};
export declare type BatchBuyResponse = {
    transaction: string;
    amountToBalance: number | object;
    value: number | object;
    route: Array<RouteDetails>;
    unavailable: Array<UnavailableDetails>;
    contractAddress: Address;
} | ErrorResponse;
export declare type GetNftDataResponse = {
    collection: CollectionObject;
    asset: AssetObject;
} | ErrorResponse;
export {};
