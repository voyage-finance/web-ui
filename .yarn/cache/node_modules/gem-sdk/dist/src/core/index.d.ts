import { Address, BatchBuyDetails, BatchBuyResponse, GetNftDataResponse } from "./interfaces";
export declare class Gem {
    Web3Provider: object;
    constructor(provider: any);
    getNftData({ nftAddress, nftId, }: {
        nftAddress: string;
        nftId: string;
    }): Promise<GetNftDataResponse>;
    getCollectionData({ sort, filters, limit, fields, }: {
        sort?: any;
        filters?: any;
        limit?: number;
        fields?: any;
    }): Promise<any>;
    getAssetData({ filters, // { "field name": "asc" or "desc"}, you can sort by multiple fields
    sort, // { "field name": 1 (include field) or -1 (ignore field) }
    fields, limit, // specifies the (max) number of responses (default: 20)
    offset, // specifies the number of results to skip from start
    status, // values can be "all" or "buy_now" (default: "buy_now")
    markets, }: {
        filters: any;
        sort?: any;
        fields?: any;
        limit?: number;
        offset?: number;
        status?: any;
        markets?: any;
    }): Promise<any>;
    getRoute(senderAddress: Address, paymentToken: Address, buyDetails: BatchBuyDetails): Promise<BatchBuyResponse>;
    batchBuyNfts(senderAddress: Address, paymentToken: Address, buyDetails: BatchBuyDetails): Promise<BatchBuyResponse>;
    bid(): Promise<void>;
    listNfts(): Promise<void>;
    sellNfts(): Promise<void>;
}
