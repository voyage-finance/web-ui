// noinspection HtmlUnknownTarget

import type { NextPage } from 'next';
import { GetServerSideProps } from 'next';
import Head from 'next/head';
import { Grid, LoadingOverlay } from '@mantine/core';
import styles from 'styles/Home.module.scss';
import { Card, Title } from '@components/base';
import PoolDetailCard from '@components/organisms/PoolDetailCard';
import TrancheCard from '@components/organisms/TrancheCard';
import { useConnect, useContractRead, useContractWrite } from 'wagmi';
import { PoolData, TrancheType } from 'types';
import VoyageProtocolDataProviderAbi from 'abi/VoyageProtocolDataProvider.json';
import TusAbi from 'abi/Tus.json';
import VoyagerAbi from 'abi/Voyager.json';
import {
  VOYAGE_DATA_PROVIDER_ADDRESS,
  TUS_ADDRESS,
  VOYAGER_ADDRESS,
} from 'abi/addresses';
import {
  fromBigNumber,
  rayToPercent,
  shiftDecimals,
  toHexString,
} from 'utils/bn';
import ConnectingOverlay from '@components/moleculas/ConnectingOverlay';
import { useState } from 'react';
import BigNumber from 'bignumber.js';
import { MAX_UINT_AMOUNT } from 'consts';
import { showNotification } from '@mantine/notifications';

const ChartCards: React.FC = () => (
  <Grid>
    <Grid.Col span={4}>
      <Card style={{ height: 256, padding: '20px 24px' }}>
        <Title order={3}>TVL</Title>
      </Card>
    </Grid.Col>
    <Grid.Col span={4}>
      <Card style={{ height: 256, padding: '20px 24px' }}>
        <Title order={3}>Utilization rate</Title>
      </Card>
    </Grid.Col>
    <Grid.Col span={4}>
      <Card style={{ height: 256, padding: '20px 24px' }}>
        <Title order={3}>Average Deposit APY</Title>
      </Card>
    </Grid.Col>
  </Grid>
);

const PoolDetailPage: React.FC = () => {
  const { data, isSuccess, isLoading, refetch } = useContractRead(
    {
      addressOrName: VOYAGE_DATA_PROVIDER_ADDRESS,
      contractInterface: VoyageProtocolDataProviderAbi,
    },
    'getPoolData',
    {
      args: TUS_ADDRESS,
    }
  );

  const poolData = isSuccess ? resultToPoolData(data) : undefined;

  const { data: EscrowContractAddress } = useContractRead(
    {
      addressOrName: VOYAGER_ADDRESS,
      contractInterface: VoyagerAbi,
    },
    'getLiquidityManagerEscrowContractAddress'
  );

  const { data: allowanceAmount } = useContractRead(
    {
      addressOrName: TUS_ADDRESS,
      contractInterface: TusAbi,
    },
    'allowance',
    {
      args: [
        '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
        EscrowContractAddress,
      ],
    }
  );

  const {
    isLoading: isApproving,
    error: errorApprove,
    writeAsync: approveTx,
  } = useContractWrite(
    {
      addressOrName: TUS_ADDRESS,
      contractInterface: TusAbi,
    },
    'increaseAllowance'
  );

  const [isApproved, setIsApproved] = useState(
    allowanceAmount &&
      fromBigNumber(allowanceAmount).isEqualTo(new BigNumber(MAX_UINT_AMOUNT))
  );

  const onApprove = async () => {
    const amountNeeded = new BigNumber(MAX_UINT_AMOUNT).minus(
      fromBigNumber(allowanceAmount)
    );

    await approveTx({
      args: [EscrowContractAddress, toHexString(amountNeeded)],
    });

    if (errorApprove)
      showNotification({
        title: 'Transaction error',
        message: errorApprove.message,
        color: 'red',
      });
    else {
      showNotification({
        title: 'Allowance increased',
        message: 'You can now start depositing',
        color: 'green',
      });
      setIsApproved(true);
    }
  };

  return (
    <div>
      <Head>
        <title>Voyage Protocol</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Grid align="stretch">
          <Grid.Col md={12} lg={3}>
            <PoolDetailCard loading={isLoading!} poolData={poolData} />
          </Grid.Col>
          <Grid.Col md={12} lg={9}>
            <ChartCards />
            <Card style={{ overflow: 'visible' }} mt={16}>
              <Grid>
                <Grid.Col span={6}>
                  <TrancheCard
                    type={TrancheType.Senior}
                    poolData={poolData}
                    withdrawable={0}
                    onDeposited={refetch}
                    isApproved={isApproved}
                    isApproving={isApproving}
                    onApprove={onApprove}
                  />
                </Grid.Col>
                <Grid.Col span={6}>
                  <TrancheCard
                    type={TrancheType.Junior}
                    poolData={poolData}
                    withdrawable={0}
                    onDeposited={refetch}
                    isApproved={isApproved}
                    isApproving={isApproving}
                    onApprove={onApprove}
                  />
                </Grid.Col>
              </Grid>
            </Card>
          </Grid.Col>
        </Grid>
      </main>
    </div>
  );
};

const resultToPoolData = (res: any): PoolData => ({
  totalLiquidity: shiftDecimals(res[0], res[8].toNumber()),
  juniorLiquidity: shiftDecimals(res[1], res[8].toNumber()),
  seniorLiquidity: shiftDecimals(res[2], res[8].toNumber()),
  juniorLiquidityRate: rayToPercent(res[3]),
  seniorLiquidityRate: rayToPercent(res[4]),
  totalDebt: shiftDecimals(res[5], res[8].toNumber()),
  borrowRate: rayToPercent(res[6]),
  trancheRatio: rayToPercent(res[7]),
  decimals: res[8].toNumber(),
});

const PageWrapper: NextPage = () => {
  const { isConnected } = useConnect();

  return isConnected ? <PoolDetailPage /> : <ConnectingOverlay />;
};

export const getServerSideProps: GetServerSideProps = async ({ params }) => {
  return {
    props: {
      id: params?.id,
    },
  };
};

export default PageWrapper;
