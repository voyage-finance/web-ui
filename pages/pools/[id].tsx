// noinspection HtmlUnknownTarget

import type { NextPage } from 'next';
import { GetServerSideProps } from 'next';
import Head from 'next/head';
import { Grid } from '@mantine/core';
import styles from 'styles/Home.module.scss';
import { Card, Title } from '@components/base';
import PoolDetailCard from '@components/organisms/PoolDetailCard';
import TrancheCard from '@components/organisms/TrancheCard';
import { useContractRead } from 'wagmi';
import VoyageProtocolDataProvider from '../../abi/VoyageProtocolDataProvider.json';
import Tus from 'deployments/localhost/Tus.json';
import { TrancheType } from 'types';
import { VOYAGE_DATA_PROVIDER_ADDRESS } from '../../abi/addresses';

const ChartCards: React.FC = () => (
  <Grid>
    <Grid.Col span={4}>
      <Card style={{ height: 256, padding: '20px 24px' }}>
        <Title order={3}>TVL</Title>
      </Card>
    </Grid.Col>
    <Grid.Col span={4}>
      <Card style={{ height: 256, padding: '20px 24px' }}>
        <Title order={3}>Utilization rate</Title>
      </Card>
    </Grid.Col>
    <Grid.Col span={4}>
      <Card style={{ height: 256, padding: '20px 24px' }}>
        <Title order={3}>Average Deposit APY</Title>
      </Card>
    </Grid.Col>
  </Grid>
);

const PoolDetail: NextPage = () => {
  const [{ data: poolData, loading }] = useContractRead(
    {
      addressOrName: VOYAGE_DATA_PROVIDER_ADDRESS,
      contractInterface: VoyageProtocolDataProvider,
    },
    'getPoolData',
    {
      args: Tus.address,
      watch: true,
    }
  );

  return (
    <div>
      <Head>
        <title>Voyage Protocol</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Grid align="stretch">
          <Grid.Col md={12} lg={3}>
            <PoolDetailCard
              loading={loading!}
              reserveSize={
                poolData ? poolData.totalLiquidity.sub(poolData.totalDebt) : 0
              }
              availableLiquidity={poolData ? poolData.totalLiquidity : 0}
              seniorAPY={poolData ? poolData.seniorLiquidityRate.toNumber() : 0}
              juniorAPY={poolData ? poolData.juniorLiquidityRate.toNumber() : 0}
            />
          </Grid.Col>
          <Grid.Col md={12} lg={9}>
            <ChartCards />
            <Card style={{ overflow: 'visible' }} mt={16}>
              <Grid>
                <Grid.Col span={6}>
                  <TrancheCard
                    type={TrancheType.Senior}
                    total={0}
                    totalUSD={0}
                    withdrawable={0}
                    withdrawableUSD={0}
                  />
                </Grid.Col>
                <Grid.Col span={6}>
                  <TrancheCard
                    type={TrancheType.Junior}
                    total={10000}
                    totalUSD={10000}
                    withdrawable={10000}
                    withdrawableUSD={10000}
                  />
                </Grid.Col>
              </Grid>
            </Card>
          </Grid.Col>
        </Grid>
      </main>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async ({ params }) => {
  return {
    props: {
      id: params?.id,
    },
  };
};

export default PoolDetail;
